#! /usr/bin/env ruby
# frozen_string_literal: false

require 'pg'
require 'io/console'

# CLI handles all command line commands from user
class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(command)
    action = command.first

    case action
    when 'list'   then application.list_expenses
    when 'add'    then cli_add(command)
    when 'search' then cli_search(command)
    when 'delete' then cli_delete(command)
    when 'clear'  then cli_clear
    else
      display_help
    end
  end

  private

  attr_reader :application

  def cli_add(command)
    amount = command[1]
    memo = command[2]
    abort 'You must provide an amount and memo.' unless amount && memo
    application.add_expense(amount, memo)
  end

  def cli_search(command)
    search_str = command[1]
    abort 'You must provide an search str.' unless search_str
    application.search(search_str)
  end

  def cli_delete(command)
    id = command[1]
    abort 'You must provide an row id to delete.' unless id
    application.delete_row(id)
  end

  def cli_clear
    puts 'This will remove all expenses. Are you sure? (y/n)'
    answer = $stdin.getch
    application.delete_all_expenses if %w[y Y].include?(answer)
  end

  def display_help
    content = <<~CONTENT
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    CONTENT

    puts content
  end
end

# ExpenseData handles behavior and interaction with db
class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def add_expense(amount, memo)
    sql = 'INSERT INTO expenses (created_on, amount, memo) VALUES (now(), $1, $2);'
    connection.exec_params(sql, [amount, memo])
  end

  def list_expenses
    expenses = connection.exec 'SELECT * FROM expenses ORDER BY created_on DESC'
    if expenses.ntuples.zero?
      puts 'There are no expenses.'
    else
      display_count(expenses)
      display_expenses(expenses)
    end
  end

  def search(search_str)
    sql = 'SELECT * FROM expenses WHERE memo ILIKE $1;'
    search_results = connection.exec_params(sql, ["%#{search_str}%"])
    display_count(search_results)
    display_expenses(search_results)
  end

  def delete_row(id)
    display_sql = 'SELECT * FROM expenses WHERE id = $1;'
    delete_sql = 'DELETE FROM expenses WHERE id = $1;'
    deleted_row = connection.exec_params(display_sql, [id])

    if deleted_row.ntuples.zero?
      puts "There is no expense with the id '#{id}'."
    else
      connection.exec_params(delete_sql, [id])
      puts 'The following expense has been deleted:'
      display_expenses(deleted_row)
    end
  end

  def delete_all_expenses
    connection.exec 'DELETE FROM expenses;'
    puts 'All expenses have been deleted.'
  end

  private

  attr_reader :connection

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12),
                 tuple['memo']]

      puts columns.join(' | ')
    end

    display_total(expenses)
  end

  def display_total(expenses)
    total = expenses.field_values('amount').map(&:to_f).sum.round(2)
    puts '-' * 50
    puts "Total #{total.to_s.rjust(25)}"
  end

  def display_count(expenses)
    puts "There are #{expenses.ntuples} expenses." if expenses.ntuples.positive?
  end

  # rubocop:disable Metrics/MethodLength
  def setup_schema
    sql = <<~SQL
      SELECT COUNT(*) FROM information_schema.tables#{' '}
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    create_table_sql = <<~CREATE_TABLE_SQL
      CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6, 2) NOT NULL,
        memo text NOT NULL,#{' '}
        created_on date NOT NULL
      );
    CREATE_TABLE_SQL

    result = connection.exec sql
    connection.exec create_table_sql if result[0]['count'] == '0'
  end
  # rubocop:enable Metrics/MethodLength
end

CLI.new.run(ARGV)
